package blang.distributions

/** A sum of \(n\) iid Bernoulli variables. Values in \(\{0, 1, 2, \dots, n\}\). */
model Binomial { 
  random IntVar numberOfSuccesses 
  
  /** The number \(n\) of Bernoulli variables being summed. \(n > 0\) */
  param IntVar numberOfTrials
  
  /** The parameter \(p \in [0, 1]\) shared by all the Bernoulli variables (probability that they be equal to 1). */
  param RealVar probabilityOfSuccess
  
  laws {
    logf(numberOfSuccesses, numberOfTrials, probabilityOfSuccess) {
      if (probabilityOfSuccess < 0.0 || probabilityOfSuccess > 1.0) return NEGATIVE_INFINITY
      if (numberOfSuccesses < 0) return NEGATIVE_INFINITY
      if (numberOfTrials <= 0 || numberOfSuccesses > numberOfTrials) return NEGATIVE_INFINITY
      return numberOfSuccesses * log(probabilityOfSuccess) + (numberOfTrials - numberOfSuccesses) * log(1.0 - probabilityOfSuccess)
    }
    logf(numberOfTrials, numberOfSuccesses) {
      if (numberOfSuccesses < 0) return NEGATIVE_INFINITY
      if (numberOfTrials <= 0 || numberOfSuccesses > numberOfTrials) return NEGATIVE_INFINITY
      return logBinomial(numberOfTrials, numberOfSuccesses)
    }
  }
  
  generate (rand) {
    rand.binomial(numberOfTrials, probabilityOfSuccess)
  }
}