package models

model LatentDirichletAllocationBagOfWords {
  param Integer N ?: 7 // dictionary size
  param Integer M ?: 2 // number of topics
  random List<List<IntVar>> data ?: #[
  	#[0,0,1,1],
  	#[1,2,0,0],
  	#[0,0,3,4],
  	#[0,1,2,3]
  ] 
  param Matrix alpha ?: ones(M) 
  param Matrix beta ?: ones(N) 
  random List<Simplex> phi ?: { 
  	val result = new ArrayList<Simplex>
    for (group : 0 ..< data.size())   	
  	  result.add(latentSimplex(M))
  	return result
  }
  random List<Simplex> theta ?: {
  	val result = new ArrayList<Simplex>
    for (group : 0 ..< M)   	
  	  result.add(latentSimplex(N))
  	return result
  }
  random List<IntVar> z ?: latentIntList(data.size())

  laws {
  	for (int i: 0..< data.size()) {
  	  phi.get(i) | alpha ~ Dirichlet(alpha)
  	}
  	for (int i: 0..< M) {
  	  theta.get(i) | beta ~ Dirichlet(beta)
  	}
  	for (int i: 0..< data.size()) {
  	  z.get(i) | phi, i ~ Categorical(phi.get(i))
  	  data.get(i) | IntVar k = z.get(i), theta ~ MultinomialDist(theta.get(k))
  	}
  }
}
